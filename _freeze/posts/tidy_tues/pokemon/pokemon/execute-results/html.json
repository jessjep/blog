{
  "hash": "5bf0c8465ab3fc9a2d0358b1ec02183a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy Tuesday: Pokemon\"\ndate: 2025-04-01\nexecute:\n  echo: true\n  warning: false\n  message: false\nimage: \"ordered_plot.png\"\ntags: \n  - tidytuesday\n---\n\n\n\nThis week's Tidy Tuesday used data from the {pokemon} package. I wanted to keep it quick and do something more creative - more like data art than data visualisation. Playing around with the {waffle} package, I used the radius function of geom_waffle() to create some interesting effect.\n\nInitially, I'd thought that the colours in the data set were specific to each pokemon, which I thought would make for a very pretty and colourful waffle plot. However, I realised that the colours were specific to type only. So I ended up grouping the colours for a slightly more informative plot.\n\nI tried ordering each row by various stats (e.g. hp, attack, speed) to see if any interesting trend could be gleaned by the patterns of colour, but these all appeared fairly random. I've included a couple below anyway as I think they're quite mesmerising!\n\n![](pokemon_grouped.png)\n\nCode:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntuesdata <- tidytuesdayR::tt_load(2025, week = 13)\npokemon_df <- tuesdata$pokemon_df\n\nlibrary(tidyverse)\nlibrary(waffle)\nlibrary(forcats)\n\npok <- pokemon_df %>%\n  drop_na(generation_id) %>%\n  mutate(generation_id = factor(generation_id)) %>%\n  group_by(generation_id) %>%\n  arrange(generation_id, color_1) %>%\n  mutate(pokemon = fct_reorder(factor(pokemon), type_1)) %>%\n  mutate(type_1 = factor(toupper(type_1))) %>%\n  ungroup()\n\n\ncolors <- pok %>%\n  distinct(type_1, color_1) %>%\n  deframe()\n\nt <- \"POKEMON TYPES AND COLORS\"\nst <- \"Each row represents a generation, from Gen 1 (top) to Gen 7 (bottom).\"\ncptn <- \"Created by jessimoore.bsky.social      Source: {pokemon}\"\n\nlibrary(sysfonts)\nlibrary(showtext)\n\nfont_add_google(\"Delius\", \"delius\")\nft <- \"delius\"\nshowtext_auto()\n\nplot <- ggplot(pok, aes(fill = type_1, values = 1)) +\n  geom_waffle(n_rows = 1, color = \"white\",\n              radius = grid::unit(2.5, \"npc\")) +\n  scale_fill_manual(values = colors) +\n  scale_y_continuous(expand = c(0,0)) +\n  facet_wrap(~generation_id, ncol = 1,\n             scales = \"free_x\") +\n  guides(fill = guide_legend(title =\"Type (1)\", \n                             position = \"bottom\", nrow = 2)) +\n  labs(title = t, subtitle = st, caption = cptn) +\n  theme_void() +\n  theme(plot.title = element_text(family = ft, size = 16, hjust = 0.5),\n        plot.subtitle = element_text(family = ft, size = 12, hjust = 0.5, margin = margin(10,10,10,10)),\n        plot.caption = element_text(family = ft, size = 9, hjust = 0.5, vjust = -5),\n        legend.text = element_text(family = ft, size = 10),\n        legend.title = element_text(family = ft, size = 12),\n        plot.caption.position = \"panel\",\n        strip.text = element_blank(),\n        panel.spacing = unit(0,'lines'),\n        plot.margin = margin(40,40,40,40),\n        legend.box.margin = margin(20,0,0,0))\n```\n:::\n\n\n\nThe plot below is ordered by descending hp, from left to right:\n\n![](ordered_plot.png)\n\nAnd this final plot is ordered alphabetically (left to right) by pokemon name:\n\n![](ordered_by_name_plot.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}