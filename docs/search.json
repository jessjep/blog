[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Jessica Moore",
    "section": "",
    "text": "Tidy Tuesday: Pokemon\n\n\n\nApr 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Amazon’s Annual Reports\n\n\n\nMar 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Palm Trees\n\n\n\nMar 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Pixar Films\n\n\n\nMar 16, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Long Beach Animal Rescue\n\n\n\nFeb 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Racial Disparities\n\n\n\nFeb 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: FBI Crime Data API\n\n\n\nFeb 20, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTableau Chess Dashboard\n\n\n\nFeb 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: CDC Datasets\n\n\n\nFeb 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: The Simpsons\n\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Water Insecurity\n\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoodreads Genres\n\n\n\nJan 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChess Federations\n\n\n\nNov 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProportion of Women in Chess\n\n\n\nOct 25, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/tableau-chess/2025-02-19-tableau-chess.html",
    "href": "posts/tableau-chess/2025-02-19-tableau-chess.html",
    "title": "Tableau Chess Dashboard",
    "section": "",
    "text": "One of my first finished Tableau visualisations can be viewed here (best viewed on a large screen). I am finding the FIDE chess player data to be a really great source for data exploration, so I looked at another (more traditional) way to visualise the chess federations - as opposed to my creative visualisation here.\nI wanted to do a lot more with this; specifically, I wanted to animate it by date to show the change over time. This was easy enough to achieve, however, achieving the dynamic sorting (from most to least, changing by year) of the bar charts was not so easy, and something I’ll have to play around with a little more."
  },
  {
    "objectID": "posts/Chess Federations/chess-feds.html",
    "href": "posts/Chess Federations/chess-feds.html",
    "title": "Chess Federations",
    "section": "",
    "text": "I created this graphic as my final project for the Domestika course “Creative Data Visualization for Narrative Designs” by Federica Fragapane. I created bubble plots and violin plots in R, which I combined and edited for the final visualisation using Inkscape."
  },
  {
    "objectID": "posts/tidy_tues/simpsons/2025-02-07-simpsons.html",
    "href": "posts/tidy_tues/simpsons/2025-02-07-simpsons.html",
    "title": "Tidy Tuesday: The Simpsons",
    "section": "",
    "text": "Week 5 of Tidy Tuesday 2025 looks at data from The Simpsons, season 21 onwards. I created the plot using R and edited it using Adobe Illustrator.\n\nThe colours were chosen to reflect the show. I prefer a darker, less saturated version:\n\nCode: github.com/jessjep/tidytuesday/blob/main/2025/04-02-25/tidy_tues_simpsons/code.R"
  },
  {
    "objectID": "posts/tidy_tues/cdc-datasets/2025-02-11-cdc-datasets.html",
    "href": "posts/tidy_tues/cdc-datasets/2025-02-11-cdc-datasets.html",
    "title": "Tidy Tuesday: CDC Datasets",
    "section": "",
    "text": "Week 6 of Tidy Tuesday 2025 looks at CDC datasets that have been backed up on archive.org during the Trump administration purge. I made an effort to edit the visuals of this one using R alone, without relying on Illustrator to fix font and alignment issues.\n\nCode: https://github.com/jessjep/tidytuesday/blob/main/2025/11-02-25/tt_cdc/treemap2.R"
  },
  {
    "objectID": "posts/tidy_tues/pixar/2025-03-16-pixar.html",
    "href": "posts/tidy_tues/pixar/2025-03-16-pixar.html",
    "title": "Tidy Tuesday: Pixar Films",
    "section": "",
    "text": "Week 10 of Tidy Tuesday used data from the {pixar} package. There were some incorrect run times so my initial plot was a little off. This is the updated version.\nCould be fun to revisit this one and add some more playful elements in Illustrator—like using balloons with string for the segments and points.\n\nCode: https://github.com/jessjep/tidytuesday/blob/main/2025/11-03-25/pixar.R"
  },
  {
    "objectID": "posts/tidy_tues/palmtrees/2025-03-19-palms.html",
    "href": "posts/tidy_tues/palmtrees/2025-03-19-palms.html",
    "title": "Tidy Tuesday: Palm Trees",
    "section": "",
    "text": "Week 11 of Tidy Tuesday used data from the {palmtrees} package. Such an interesting dataset with so many options to explore.\nI find dendrograms confusing, so I followed this helpful post to help me create it: https://paulapivat.com/technical_notes/example_tech/data_viz_tip1/.\n\n\nCode\n\n\nLoad Data and Libraries\npalmtrees &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')\n\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(ggtext)\nlibrary(sysfonts)\nlibrary(showtext)\n\n\n\n\nWrangle the Data\n# turn the data into a format suitable for dendrograms #\npalms &lt;- palmtrees %&gt;%\n  group_by(palm_subfamily) %&gt;%\n  arrange(palm_subfamily) %&gt;%\n  mutate(level1 = \"palmcenter\",\n         level2 = palm_subfamily,\n         level3 = palm_tribe,\n         level4 = spec_name) %&gt;%\n  ungroup() %&gt;%\n  select(level1:level4)\n\n# create the edges #\npalms_edges_1_2 &lt;- palms %&gt;%\n  select(level1, level2) %&gt;%\n  unique() %&gt;%\n  rename(from = level1, to = level2) %&gt;%\n  mutate(subfam = to) # adding this column for colour grouping\n\npalms_edges_2_3 &lt;- palms %&gt;%\n  select(level2, level3) %&gt;%\n  unique() %&gt;%\n  rename(from = level2, to = level3) %&gt;%\n  mutate(subfam = from) # adding this column for colour grouping\n\npalms_edges_3_4 &lt;- palms %&gt;%\n  select(level2, level3, level4) %&gt;%\n  unique() %&gt;%\n  rename(from = level3, to = level4) %&gt;%\n  mutate(subfam = level2) %&gt;% # adding this column for colour grouping\n  select(-level2) \n\nedge_list &lt;- rbind(palms_edges_1_2, palms_edges_2_3, palms_edges_3_4)\n\npalms_plot &lt;- graph_from_data_frame(edge_list) %&gt;%\n  as_tbl_graph()\n\n\n\n\nDefine Fonts, Text, and Colours\nfont_add_google(\"Milonga\", \"milonga\")\nfont_add_google(\"Kurale\", \"kurale\")\nft &lt;- \"milonga\"\nft2 &lt;- \"kurale\"\nshowtext_auto()\n\ntitle &lt;- \"Palm Trees\"\nsubtitle &lt;- \"Over 2,500 species of palms exist worldwide, categorized into 29 tribes across\n5 subfamilies: &lt;span style = 'color: #04724d;'&gt;**Arecoideae**&lt;/span&gt;, &lt;span style = 'color: #74a57f;'&gt;**Calamoideae**&lt;/span&gt;, &lt;span style = 'color: #06AD81;'&gt;**Ceroxyloideae**&lt;/span&gt;, &lt;span style = 'color: #4c934c;'&gt;**Coryphoideae**&lt;/span&gt;, and &lt;span style = 'color: #b7ce63;'&gt;**Nypoideae**&lt;/span&gt;.\\n\nIn this diagram, the leaves are made up of thousands of lines, each representing a species of palm.\nEach leaf represents a palm tribe, and each colour a subfamily.\"\ncaption &lt;- \"Created by: jessimoore.bsky.social   Source: {palmtrees}\"\n\nc &lt;- c(\"#04724d\", \"#74a57f\", \"#06AD81\",\n       \"#4c934c\", \"#b7ce63\")\n\n\n\n\nCreate the Plot\npalmtree &lt;- ggraph(palms_plot, layout = \"dendrogram\", circular = TRUE) +\n  geom_edge_arc(aes(width = after_stat(index), edge_colour = subfam)) +\n  scale_edge_color_manual(values = c) +\n  scale_edge_width(range = c(1,0.2)) +\n  theme_void() +\n  labs(title = title, subtitle = subtitle, caption = caption) +\n  theme(panel.background = element_rect(fill = \"#d7fff1\", color = NA),\n        plot.background = element_rect(fill = \"#d7fff1\", color = NA),\n        plot.title = element_text(family = ft, size = 34, hjust = 0.5),\n        plot.subtitle = element_textbox_simple(family = ft2, size = 10, \n                                               hjust = 0.5, halign = 0.5,\n                                               margin = margin(15,0,0,0)),\n        plot.caption = element_text(family = ft2, size = 8, hjust = 0.5),\n        plot.caption.position = \"plot\",\n        legend.position = \"none\",\n        plot.margin = margin(20,20,20,20))"
  },
  {
    "objectID": "posts/goodreads-genres/2025-01-08-goodreads-genres.html",
    "href": "posts/goodreads-genres/2025-01-08-goodreads-genres.html",
    "title": "Goodreads Genres",
    "section": "",
    "text": "I was interested in whether particular book genres are more highly rated by readers than others. Based on my experience on the Goodreads website, I was expecting to see very high ratings for fantasy and young adult books, which are quite popular. I had a lot of fun making this and learning how to webscrape with the rvest package (Goodreads’ API is no longer available). I took data only from the 50 most shelved books per the selected genres, so this may have influenced the results.\n\nI chose to separate high fantasy and “romantasy” somewhat arbitrarily based on my own opinion that they attract quite different followings. However, there may be quite a bit of overlap between the two.\nI performed a Welch’s one-way ANOVA and Games-Howell post-hoc test to determine whether significant differences existed between the genres’ average ratings (the assumption of homogeneity of variances was not met for a regular ANOVA).\nHigh fantasy was more highly rated than all other genres (except romantasy). Romantasy was more highly rated than everything except for science fiction and young adult (and high fantasy). Science fiction was more highly rated than the classics."
  },
  {
    "objectID": "posts/tidy_tues/fbi-crime-api/2025-02-20-fbi_crime_api.html",
    "href": "posts/tidy_tues/fbi-crime-api/2025-02-20-fbi_crime_api.html",
    "title": "Tidy Tuesday: FBI Crime Data API",
    "section": "",
    "text": "Week 7 of Tidy Tuesday 2025 looks at data from the FBI Crime API. The following plot visualises the dates when crime agencies around the USA adopted the National Incident-Based Reporting System, which collects crime data in much greater detail than the original Summary Reporting System (SRS).\n\nCode: https://github.com/jessjep/tidytuesday/blob/main/2025/18-02-25/fbi_crime_data/nibrs_start_date.R"
  },
  {
    "objectID": "posts/tidy_tues/long-beach/2025-03-04-long-beach.html",
    "href": "posts/tidy_tues/long-beach/2025-03-04-long-beach.html",
    "title": "Tidy Tuesday: Long Beach Animal Rescue",
    "section": "",
    "text": "Code: https://github.com/jessjep/tidytuesday/blob/main/2025/03-03-25/surrenders2.R"
  },
  {
    "objectID": "posts/tidy_tues/racial-disparities/2025-02-27-racial-disparities.html",
    "href": "posts/tidy_tues/racial-disparities/2025-02-27-racial-disparities.html",
    "title": "Tidy Tuesday: Racial Disparities",
    "section": "",
    "text": "Week 8 of Tidy Tuesday shows some concerning trends from reproductive medicine research findings in the US.\n\nCode: https://github.com/jessjep/tidytuesday/blob/main/2025/24-02-25/disparities.R"
  },
  {
    "objectID": "posts/tidy_tues/water-insecurity/2025-02-01-water-insecurity.html",
    "href": "posts/tidy_tues/water-insecurity/2025-02-01-water-insecurity.html",
    "title": "Tidy Tuesday: Water Insecurity",
    "section": "",
    "text": "My submission for week 4 of Tidy Tuesday, 2025 - an enhanced dumbbell plot. My code for the initial plot, created in R, is detailed below the image.\n\nR Code: \n\n# load packages:\n\nlibrary(forcats)\nlibrary(dplyr)\n\n# load the data:\n\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 4)\n\nwater_insecurity_2022 &lt;- tuesdata$water_insecurity_2022\nwater_insecurity_2023 &lt;- tuesdata$water_insecurity_2023\n\n# organise the data:\n\nwater_ins_22 &lt;- water_insecurity_2022 %&gt;% \n  separate_wider_delim(name, \", \", names = c(\"county\", \"state\")) %&gt;% \n  group_by(state) %&gt;% \n  summarise(avg_pct = mean(percent_lacking_plumbing), \n            people_lacking_plumbing = sum(plumbing)) %&gt;% \n  mutate(year = 2022)\n\nwater_ins_23 &lt;- water_insecurity_2023 %&gt;%\n  separate_wider_delim(name, \", \", names = c(\"county\", \"state\")) %&gt;% \n  group_by(state) %&gt;% \n  summarise(avg_pct = mean(percent_lacking_plumbing), \n            people_lacking_plumbing = sum(plumbing)) %&gt;% \n  mutate(year = 2023)\n\nwater_ins &lt;- bind_rows(water_ins_22, water_ins_23) %&gt;% \n  group_by(state) %&gt;% \n  mutate(pct_diff = avg_pct[year==2022] - avg_pct[year==2023]) %&gt;% \n  drop_na() %&gt;% \n  mutate(gradient = sqrt(avg_pct)) \n\nsegment &lt;- water_ins %&gt;% # used to create the segments on the plot \n  select(state, avg_pct, year) %&gt;% \n  pivot_wider(names_from = year, values_from = avg_pct) %&gt;% \n  rename(avg_pct_22 = \"2022\", \n         avg_pct_23 = \"2023\")\n\n\n# create the plot:\n\np &lt;- ggplot() + \\\\\n  geom_segment(data = segment,\n               aes(x = state, y = avg_pct_22,\n                   yend = avg_pct_23, color = avg_pct_23),\n               alpha = 0.8, size = 0.6) +\n  geom_point(data = water_ins %&gt;% filter(year == 2023),\n             aes(y = avg_pct, x = fct_reorder(state, pct_diff),\n                 color = gradient,\n                 size = people_lacking_plumbing,\n                 ), shape = 17, alpha = 0.6) +\n  geom_point(data = water_ins %&gt;% filter(year == 2022),\n             aes(y = avg_pct, x = fct_reorder(state, pct_diff),\n                 color = gradient,\n                 size = people_lacking_plumbing),\n             alpha = 0.6) +\n  scale_color_gradient2(low = \"#3f88c5\",\n                        mid = \"#edae49\",\n                        high = \"#d1495b\",\n                        midpoint = 0.5) +\n  scale_y_sqrt() +\n  guides(alpha = \"none\") +\n  coord_flip() +\n  labs(y = \"% of Population Lacking Plumbing Facilities\",\n       x = NULL,\n       size = \"Population Lacking \\n Plumbing Facilities\",\n       title = \"Water Insecurity in the United States\") +\n  theme_light() + \\\\\n  theme(legend.position = \"bottom\")\np\n\n# from here, I edited the plot in Illustrator."
  },
  {
    "objectID": "posts/chess1/2024-10-25-chess1.html",
    "href": "posts/chess1/2024-10-25-chess1.html",
    "title": "Proportion of Women in Chess",
    "section": "",
    "text": "I was interested in plotting the proportion of male and female chess players over time. The following plots were created using FIDE player data and therefore only show the trend in players who have an official FIDE standard rating.\n\n\n\n\n\n\n\nThe number of chess players registered with FIDE has more than tripled since 2012. Female players coninue to make up about one in ten, a proportion that has not changed over the years.\nWhen filtering to only ‘active’ players – those who have played in a tournament in the previous 12 months – the proportion is similar:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking at these numbers by age group, we can see that around half of female chess players are under the age of 18, compared to around a quarter of males. This is unsurprising, and consistent with the understanding that girls tend to drop out of chess much sooner than boys.\n\n\n\n\n\n\n\nHow has the number of girls participating in chess tournaments changed over the last decade? Well, there has been a small increase, but boys still outnumber them by more than three to one:\n\n\n\n\n\n\n\n\nRecommended reading:\nGender Differences: The Chess Delusion\nChecking Gender Bias: Parents and Mentors Perceive Less Chess Potential in Girls"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome 👋",
    "section": "",
    "text": "I’m developing my skills in data visualisation and analysis. This is a space for me to share my learning and various personal projects, which are mostly submissions to Tidy Tuesday at the moment.\nContact me at: jessicamoore.tn@gmail.com"
  },
  {
    "objectID": "posts/tidy_tues/amazon/amazon.html",
    "href": "posts/tidy_tues/amazon/amazon.html",
    "title": "Tidy Tuesday: Amazon’s Annual Reports",
    "section": "",
    "text": "This week’s data was curated by Gregory Vander Vinne. I used the lead() function from dplyr to look at the ‘next’ word and create and investigate trigrams, rather than single words.\n“Stock based compensation” was by far the most common trigram. However, it has been mentioned less and less since 2015.\n\n\nCode:\n\n\nLoad Data and Libraries\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 12)\nreport_words_clean &lt;- tuesdata$report_words_clean\n\nlibrary(tidytext)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(sysfonts)\nlibrary(showtext)\n\n\n\n\nReverse Engineer Trigrams and Look at the Most Common\ntrigrams &lt;- report_words_clean %&gt;%\n  mutate(word2 = lead(word),\n         word3 = lead(word2))\n\n# common trigrams #\ntri &lt;- trigrams %&gt;%\n  filter(!(word == word2),\n         !(word2 == word3),\n         !(word == word3)) %&gt;%\n  unite(trigram, c(\"word\", \"word2\", \"word3\"), sep = \" \") %&gt;%\n  group_by(year) %&gt;%\n  count(trigram, sort = TRUE) %&gt;%\n  slice_max(n, n = 10) \n# this reveals \"stock based compensation\" and \"foreign exchange rates\" as common trigrams\n\n\n\n\nPrepare for Plotting\ntri_graph &lt;- trigrams %&gt;%\n  group_by(year) %&gt;%\n  unite(trigram, c(\"word\", \"word2\", \"word3\"), sep = \" \") %&gt;%\n  mutate(total_trigrams = n()) %&gt;%\n  filter(trigram %in% c(\"stock based compensation\", \"foreign exchange rates\")) %&gt;%\n  count(year, total_trigrams, trigram) %&gt;%\n  mutate(relative_freq = n/total_trigrams*100)\n\n# fonts and text #\nt &lt;- \"Term Frequency in Amazon's Annual Reports\"\nst &lt;- \"The graph shows the relative term frequency of the trigrams 'stock based compensation' and 'foreign exchange rates' in Amazon's Annual Reports. \nThis is is expressed as a percentage of the total number of trigrams in each report. Mentions of 'stock based compensation' have declined significantly \nsince 2005. Meanwhile, mentions of 'foreign exchange rates' have been rising.\"\ncptn &lt;- \"Created by: jessimoore.bsky.social    Source: Amazon's Annual Reports\"\n\nfont_add_google(\"Roboto\", \"robo\")\nft &lt;- \"robo\"\nshowtext_auto()\n\n\n\n\nCreate the Plot\nplot &lt;- ggplot(tri_graph, aes(x = year, y = relative_freq, color = trigram)) +\n  geom_line(size = 1.5) +\n  annotate(\"text\", x = 2016, y = 0.25, label = '\"stock based compensation\"', \n            color = \"#4e598c\", fontface = \"bold\", family = ft, angle = -30) +\n  annotate(\"text\", x = 2006.2, y = 0.297, label = \"68 mentions\", \n           color = \"#4e598c\", family = ft) +\n  annotate(\"text\", x = 2022, y = 0.07, label = \"19 mentions\", \n           color = \"#4e598c\", family = ft) +\n  annotate(\"text\", x = 2014, y = 0.107, label = '\"foreign exchange rates\"',\n            color = \"#f9c784\", fontface = \"bold\", family = ft, angle = 42) +\n  annotate(\"text\", x = 2006, y = 0.03, label = \"5 mentions\", \n           color = \"#f9c784\", family = ft) +\n  annotate(\"text\", x = 2022, y = 0.128, label = \"31 mentions\", \n           color = \"#f9c784\", family = ft) +\n  labs(title = t, subtitle = st, caption = cptn,\n       x = NULL, y = \"%\") +\n  scale_color_manual(values = c(\"#f9c784\", \"#4e598c\")) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid = element_blank(),\n        axis.text = element_text(family = ft, size = 10),\n        axis.title.y = element_text(family = ft, size = 18,\n                                    angle = 0, vjust = 0.5),\n        plot.title = element_text(family = ft, size = 25, hjust = 0.5),\n        plot.subtitle = element_text(family = ft, size = 10, hjust = 0.5,\n                                     margin = margin(10,0,20,0)),\n        plot.caption = element_text(family = ft, size = 8, \n                                    hjust = 0.5, vjust = -15),\n        plot.caption.position = \"plot\",\n        plot.margin = margin(30,30,40,30))"
  },
  {
    "objectID": "posts/tidy_tues/pokemon/pokemon.html",
    "href": "posts/tidy_tues/pokemon/pokemon.html",
    "title": "Tidy Tuesday: Pokemon",
    "section": "",
    "text": "This week’s Tidy Tuesday used data from the {pokemon} package. I wanted to keep it quick and do something more creative - more like data art than data visualisation. Playing around with the {waffle} package, I used the radius function of geom_waffle() to create some interesting effect.\nInitially, I’d thought that the colours in the data set were specific to each pokemon, which I thought would make for a very pretty and colourful waffle plot. However, I realised that the colours were specific to type only. So I ended up grouping the colours for a slightly more informative plot.\nI tried ordering each row by various stats (e.g. hp, attack, speed) to see if any interesting trend could be gleaned by the patterns of colour, but these all appeared fairly random. I’ve included a couple below anyway as I think they’re quite mesmerising!\n\nCode:\n\n\nCode\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 13)\npokemon_df &lt;- tuesdata$pokemon_df\n\nlibrary(tidyverse)\nlibrary(waffle)\nlibrary(forcats)\n\npok &lt;- pokemon_df %&gt;%\n  drop_na(generation_id) %&gt;%\n  mutate(generation_id = factor(generation_id)) %&gt;%\n  group_by(generation_id) %&gt;%\n  arrange(generation_id, color_1) %&gt;%\n  mutate(pokemon = fct_reorder(factor(pokemon), type_1)) %&gt;%\n  mutate(type_1 = factor(toupper(type_1))) %&gt;%\n  ungroup()\n\n\ncolors &lt;- pok %&gt;%\n  distinct(type_1, color_1) %&gt;%\n  deframe()\n\nt &lt;- \"POKEMON TYPES AND COLORS\"\nst &lt;- \"Each row represents a generation, from Gen 1 (top) to Gen 7 (bottom).\"\ncptn &lt;- \"Created by jessimoore.bsky.social      Source: {pokemon}\"\n\nlibrary(sysfonts)\nlibrary(showtext)\n\nfont_add_google(\"Delius\", \"delius\")\nft &lt;- \"delius\"\nshowtext_auto()\n\nplot &lt;- ggplot(pok, aes(fill = type_1, values = 1)) +\n  geom_waffle(n_rows = 1, color = \"white\",\n              radius = grid::unit(2.5, \"npc\")) +\n  scale_fill_manual(values = colors) +\n  scale_y_continuous(expand = c(0,0)) +\n  facet_wrap(~generation_id, ncol = 1,\n             scales = \"free_x\") +\n  guides(fill = guide_legend(title =\"Type (1)\", \n                             position = \"bottom\", nrow = 2)) +\n  labs(title = t, subtitle = st, caption = cptn) +\n  theme_void() +\n  theme(plot.title = element_text(family = ft, size = 16, hjust = 0.5),\n        plot.subtitle = element_text(family = ft, size = 12, hjust = 0.5, margin = margin(10,10,10,10)),\n        plot.caption = element_text(family = ft, size = 9, hjust = 0.5, vjust = -5),\n        legend.text = element_text(family = ft, size = 10),\n        legend.title = element_text(family = ft, size = 12),\n        plot.caption.position = \"panel\",\n        strip.text = element_blank(),\n        panel.spacing = unit(0,'lines'),\n        plot.margin = margin(40,40,40,40),\n        legend.box.margin = margin(20,0,0,0))\n\n\nThe plot below is ordered by descending hp, from left to right:\n\nAnd this final plot is ordered alphabetically (left to right) by pokemon name:"
  }
]